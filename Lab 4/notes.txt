1. 										How to use CHMOD

	
	If you want rwxrw--wx, divide in group of three;
		-> rwx == 111 = 7(binary)
		-> rw- == 110 = 4(binary)
		-> -wx == 011 = 3(binary)

		So write chmod 743 <filename>(whose permission you wanna change)

2. du -s * will give you the exact size of all the directories in a given directories while just doing du -s will give you the exact size of the directory in which you are


3. 											Some info on GREP

	
	--> grep -i "license" <filename> (will ignore case when searching, LiCeNSe will also be searched)

	--> grep -w <word> <filename> (matches the exact word)
		grep "\<world\>" <filename> (searches the exact word in file) (backslash is escape)

	--> grep -v "the" <filename> (will ignore the pattern 'the' in searched result)

	--> grep -n will tell you the line numbers in which search result is seen

	--> grep ^abid (^ in starting means match all words that begin with abid)

	--> grep abid$ ($ matches the pattern at the end of file)

	--> grep "..cept"  . here means single character there and it can be anything

	--> By placing a group of characters within brackets ("[" and "]"), we can specify that the character at that position can be any one character found within the bracket group.

		grep "t[to]o" <filename>  will match 'too' or 'tto'

	--> grep "[^c]ode" <filename>  will match .ode but not 'code' (i.e. ^ inside a braket will ignore all texts)


	?	The question mark indicates zero or one occurrences of the preceding element. For example, "colou?r" matches both 		"color" and "colour".

	*	The asterisk indicates zero or more occurrences of the preceding element. For example, ab*c matches "ac", "abc", 		"abbc", "abbbc", and so on.

	+	The plus sign indicates one or more occurrences of the preceding element. For example, ab+c matches "abc", "abbc", 		"abbbc", and so on, but not "ac".

	{n}	The preceding item is matched exactly n times.
	{min,}	The preceding item is matched min or more times.
	{min,max}	The preceding item is matched at least min times, but not more than max times.


4. 													On command SED

	By default sed only replaces first instance of replacement word in each lines


	--> sed 's/unix/linux' geekfile.txt 
		Here the “s” specifies the substitution operation. The “/” are delimiters. The “unix” is the search pattern and the “linux” is the replacement string 
		It will only replace the first 'unix' instance to 'linux'

	--> sed 's/unix/linux/2' geekfile.txt
		Use the /1, /2 etc flags to replace the first, second occurrence of a pattern in a line. The below command replaces the second occurrence of the word “unix” with “linux” in a line

		Here the 2nd instance of 'unix' will be replaced to 'linux' in each line

	--> sed 's/unix/linux/g' geekfile.txt
			g means global replacement, all the 'unix' instances will be replaced to 'linux'

	--> sed 's/unix/linux/3g' geekfile.txt
			Change all from the 3rd instance in each line

	--> sed '3 s/unix/linux/' geekfile.txt
			Changes the first instance of 'unix' to 'linux' in line number 3, whereas if we put g at the end, it will replace all the instances of 'unix' to 'linux' in line 3

	--> sed 's/unix/linux/p' geekfile.txt
			All the lines in which 'unix' is changed to 'linux' will be printed twice(and both print will be after replacing the word 'unix')

	--> sed -n 's/unix/linux/p' geekfile.txt
			Prints the replaced line only once (see -n is needed to supress twice printing by p, also written in man sed)

	--> sed '1,3 s/unix/linux/' geekfile.txt
			Changes the first instance of 'unix' to linux in only lines 1,2,3

	--> sed '2,$ s/unix/linux/' geekfile.txt
			Changes the first instance of 'unix' to 'linux' in each lines 2-end

	--> sed '5d' filename.txt
			Delete 5th line, if we do '$d' it means delete last line, if we do '3-6d' delete lines 3,4,5,6

	--> sed '/abc/d' filename.txt
			Will delete the line which will have pattern 'abc' (even though if we have 'abcd' it will delete)


	--> sed -i 's/a/d/g' <filename> will make permanent changes in file, while all other sed commands do not change the file, 	  they just show what the changed output will be if me send that sed in some other file
		Ex: sed 's/a/b/g' <filename> >> <newfile>


		sed -e 's/.../.../;t;d'
		This will replace pattern and delete all lines that do not contain the pattern (t here without label deletes all the following commands and d deletes the line)


											5. How to use AWK




	--> awk '{print}' employee.txt
			Will print all the lines in employee.txt

	--> awk '/manager/ {print}' employee.txt
			Will print all lines that have manager in it

	--> awk '{print $1,$4}' employee.txt
			If a line has 4 words, this command will print the first and the 4th word, $0 prints the whole line
			If I write $1.$2, it will concatenate two words, like HelloWorld whereas above will give Hello World

	--> awk’s built-in variables include the field variables—$1, $2, $3, and so on ($0 is the entire line) — that 			break a line of text into individual words or pieces called fields.

	--> awk '{print NR,$0}' employee.txt
			NR will show the lines along with their line number, $0 will print the whole line as it is

	--> awk '{print $1,$NF}' employee.txt
			NF tells the number of fields (or you can say columns in a particular row of words or data, if a line has 4 words separated by space, no of fileds will be four)
			So, this will print the first word and the last word

	--> awk 'NR==3, NR==6 {print NR,$0}' employee.txt 
			To print lines from 3 to 6 along with the line number

	--> awk '/[0-9]/{print}' employee.txt
			Grab every line that contains numbers
			^[0-9] will give every line that starts with a number
			[0-9]$ will give line that ends in number


	--> awk '{if ($NF ~ /45000/) print }'
			Will print all those lines that has last entry as 45000

	--> awk -F: '{ print $2 }' employee.txt
			By default it uses white space as separating character, now it will use : as a separating character
			Ex: Santiago:Bernebau if we do awk {print $2} will give blank ans
				while awk -F: '{ print $2 }' employee.txt will give Bernebau as ans,.. it changed the separating character for classifying fields

	--> awk '{ if (length($0) > max) max = length($0) } END { print max }' geeksforgeeks.txt
			Line of maximum lenghth

	--> awk 'END { print NR }' geeksforgeeks.txt
			Number of lines 

	--> awk BEGIN
			awk options 'BEGIN {actions} Processing statements END {actions} ' input_file  (format) 
			Processing statements will execute for every line in input_file

			If you want to print 2 things in awk, do it like print<thing1>, print<thing2>
			
	-->  awk 'BEGIN{OFS=":";}{print $1,$2}' sample.txt  (called output field separator)
		Here the output file will be displayed by having ":" as separating medium instead of white space

	--> awk 'BEGIN{FS="|";OFS="\t";}{print $1,$2,$3,$4,$5}' ofs_fs.txt 
		SEE ofs_fs.txt and this upper command to see avout OFS and FS