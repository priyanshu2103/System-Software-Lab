											SHELL SCRIPTING

compgen -c tells all the linux commands available to you

1. We start the scripting by # !/bin/bash(called the shebang construct)

2. readonly OYE
	This variable by the name 'OYE' will be readonly, means the initial value that it was assigned will not change

3. UNSETTING OF A VARIABLE
	Unsetting or deleting a variable directs the shell to remove the variable from the list of variables that it tracks. Once you unset a variable, you cannot access the stored value in the variable. 
	You cannot use the unset command to unset variables that are marked readonly

4. ENVIRONMENT AND SHELL VARIABLES
	Standard UNIX variables are split into two categories, environment variables and shell variables. In broad terms, shell variables apply only to the current instance of the shell and are used to set short-term working conditions; environment variables have a farther reaching significance, and those set at login are valid for the duration of the session. By convention, environment variables have UPPER CASE and shell variables have lower case names.

5. <<COMMENT
	write your script
	COMMENT
	(This will make multiline comments)
	For single line comments we have #

	OR
	you can use

	: '
	comment
	comment
	comment
	'

6. NAME[0]=""
	NAME[1]=""
	In this way you can declare an array
	echo $(NAME[0]) to print the first element of array
	If you want to print all elements of array, do echo $(NAME[*]) or echo $(NAME[@])
	echo $(!os[@]) will print the indexes of the array
	echo $(#os[@]) length of array

	unset os[2] :- removes the element at index 2, array is not rearranged, position 2 remains empty

7.  echo -n lets echo avoid printing a new line character.
	echo -e lets us use the '\' characters...They are useful in printing tab space in script
	Ex: echo -e '\t' adios amigos
	Ex: echo -e "Enter your name: \c"
		echo Priyanshu
		These above set of arguments will give ans as Enter your name: Priyanshu

8. The break command can also be used to exit from a nested loop using this format âˆ’
	break n
	Here n specifies the nth enclosing loop to the exit from.

9. read -sp 'password': pass_word
	-s will hide our input(for passwords vagerah we use)
	read -p will help us to give the input in same line as of 'password' 

   read -a will take the input and store it in array

10. To pass the input parameters as an array, just do
	arr=("$@")
	echo $# tells the number of arguments passed

11. 
	if [condition]
	then
	    statements
	fi
	            
	if using [] use -eq -gt and so on else if using < ... use (( )) for numbers

12. When comparing using <,>,<=,>= we need to use double curve brackets(if not string) and we need to use double square brackets(if using string)

13. Arithmetic operations:
	Use echo $((num1+num2)) to add
	OR use echo `expr $num1+$num2`

14. USING CASE
	
	case expression in
		pattern1 )
			statements ;;
		pattern2 )
			statements ;;
		* ) --> default case
			statements ;;
	esac

15. ? expects any one letter special character

16. for i in {START..END..INCREMENT}
	Ex: {1..10..2}
	Gives 1,3,5,7,9

	Or 
	for ((i=0;i<5;i++))
	do
		<command>
	done

17.  

USE MAN TEST --> IT'S A SAVIOR

Syntax to find out if file exists with conditional expressions in a Bash Shell
-e: Returns true value if file exists.
-f: Return true value if file exists and regular file.
-r: Return true value if file exists and is readable.
-w: Return true value if file exists and is writable.
-x: Return true value if file exists and is executable.
-d: Return true value if exists and is a directory.
-s: Check if a file is empty or not

18. inside if -e if file exists or not -f for regular file -d for directory -s if file is empty -b for block file -c for character file
for permissions use -r -w -x

19. Length of a string in bash
	${#p}
	where p is string name

20. FIND COMMAND IN LINUX
	find . -name <filename>
		- find all files inside current working directory with the given name
	find . -iname <filename> (ignore case)
	find . -type d -name <dirname>
		-find all directories in current directory with the name
	find $dir -type f -perm 777
		- find all files in dir directory with permission 777
	find . -type f -name "*.mp3" -exec rm -f {} \;
		- find and remove multiple files 